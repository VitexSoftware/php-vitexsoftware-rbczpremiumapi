<?php

declare(strict_types=1);

/**
 * This file is part of the MultiFlexi package
 *
 * https://github.com/VitexSoftware/php-vitexsoftware-rbczpremiumapi
 *
 * (c) Vítězslav Dvořák <http://vitexsoftware.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Production.
 *
 * ##### API Overview - Accounts list and balance - Transaction overview (also for saving accounts) - Payments import - Statement list and download - FX rates  ##### Authentication Before making a call to Premium API, you need to register your app at our _Developer portal_. This is where you get the **ClientID** that your application must send in the request as `X-IBM-Client-Id`. This is the key that grants your app access to the API.  However, this may not be enough. Your application needs to use mTLS to call most operations here. Thus, you not only need _https_ but also a client certificate issued by us. The exception is two operations for FX rates that are accessible also without a client certificate.  Each bank client/user can issue several certificates. Each certificate can permit different sets of operations (http methods) on different bank accounts. All this must be configured in Internet Banking first by each bank client/user (bank clients need to look under _Settings_ and do not forget to download the certificate at the last step). The certificate is downloaded in **PKCS#12** format as **\\*.p12** file and protected by a password chosen by the bank client/user. Yes, your app needs the password as well to get use of the **\\*p12** file for establishing mTLS connection to the bank.  Client certificates issued in Internet Banking for bank clients/users have limited validity (e.g. **5 years**). However, **each year** certificates are automatically blocked and bank client/user must unblock them in Internet Banking. It is possible to do it in advance and prolong the time before the certificate is blocked. Your app should be prepared for these scenarios and it should communicate such cases to your user in advance to provide seamless service and high user-experience of your app.  ##### Rate Limiting The number of requests in each API operation is limited to 10 per client per sliding second and 5000 per client per sliding day. The exception is the 'Download Statement' operation with the limits lowered to 5 per client per sliding second and 1500 per client per sliding day. This is because it transports potentially sizeable binary files. The consumer must be able to handle HTTP status 429 in case of exceeding these limits.  Response headers `X-RateLimit-Limit-Second` and `X-RateLimit-Limit-Day` show the actual limits configured for the specific operation. Response headers `X-RateLimit-Remaining-Second` and `X-RateLimit-Remaining-Day` are returned to help prevent the limits from being exceeded.  ##### Notes Be aware, that in certain error situations, API can return specific error structures along with 5xx status code, which is not explicitely defined below.  ##### Quick Start Client Feel free to download a <a href=\"assets/PremiumApiClient.java\" download>simple Java client</a> that gives you quick access to our API.
 *
 * The version of the OpenAPI document: 1.1.20240910
 * Contact: info@vitexsoftware.cz
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VitexSoftware\Raiffeisenbank\Model;

use VitexSoftware\Raiffeisenbank\ObjectSerializer;

/**
 * GetAccounts200ResponseAccountsInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class GetAccounts200ResponseAccountsInner implements \ArrayAccess, \JsonSerializable, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'getAccounts_200_response_accounts_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'accountId' => 'int',
        'accountName' => 'string',
        'friendlyName' => 'string',
        'accountNumber' => 'string',
        'accountNumberPrefix' => 'string',
        'iban' => 'string',
        'bankCode' => 'string',
        'bankBicCode' => 'string',
        'mainCurrency' => 'string',
        'accountTypeId' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'accountId' => null,
        'accountName' => null,
        'friendlyName' => null,
        'accountNumber' => null,
        'accountNumberPrefix' => null,
        'iban' => null,
        'bankCode' => null,
        'bankBicCode' => null,
        'mainCurrency' => null,
        'accountTypeId' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'accountId' => false,
        'accountName' => false,
        'friendlyName' => false,
        'accountNumber' => false,
        'accountNumberPrefix' => false,
        'iban' => false,
        'bankCode' => false,
        'bankBicCode' => false,
        'mainCurrency' => false,
        'accountTypeId' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'accountId' => 'accountId',
        'accountName' => 'accountName',
        'friendlyName' => 'friendlyName',
        'accountNumber' => 'accountNumber',
        'accountNumberPrefix' => 'accountNumberPrefix',
        'iban' => 'iban',
        'bankCode' => 'bankCode',
        'bankBicCode' => 'bankBicCode',
        'mainCurrency' => 'mainCurrency',
        'accountTypeId' => 'accountTypeId',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'accountId' => 'setAccountId',
        'accountName' => 'setAccountName',
        'friendlyName' => 'setFriendlyName',
        'accountNumber' => 'setAccountNumber',
        'accountNumberPrefix' => 'setAccountNumberPrefix',
        'iban' => 'setIban',
        'bankCode' => 'setBankCode',
        'bankBicCode' => 'setBankBicCode',
        'mainCurrency' => 'setMainCurrency',
        'accountTypeId' => 'setAccountTypeId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'accountId' => 'getAccountId',
        'accountName' => 'getAccountName',
        'friendlyName' => 'getFriendlyName',
        'accountNumber' => 'getAccountNumber',
        'accountNumberPrefix' => 'getAccountNumberPrefix',
        'iban' => 'getIban',
        'bankCode' => 'getBankCode',
        'bankBicCode' => 'getBankBicCode',
        'mainCurrency' => 'getMainCurrency',
        'accountTypeId' => 'getAccountTypeId',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('accountId', $data ?? [], null);
        $this->setIfExists('accountName', $data ?? [], null);
        $this->setIfExists('friendlyName', $data ?? [], null);
        $this->setIfExists('accountNumber', $data ?? [], null);
        $this->setIfExists('accountNumberPrefix', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('bankCode', $data ?? [], null);
        $this->setIfExists('bankBicCode', $data ?? [], null);
        $this->setIfExists('mainCurrency', $data ?? [], null);
        $this->setIfExists('accountTypeId', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            \JSON_PRETTY_PRINT,
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return \in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['accountId'] === null) {
            $invalidProperties[] = "'accountId' can't be null";
        }

        if ($this->container['accountNumber'] === null) {
            $invalidProperties[] = "'accountNumber' can't be null";
        }

        if ($this->container['bankCode'] === null) {
            $invalidProperties[] = "'bankCode' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return \count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets accountId.
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId.
     *
     * @param int $accountId The unique internal account id
     *
     * @return self
     */
    public function setAccountId($accountId)
    {
        if (null === $accountId) {
            throw new \InvalidArgumentException('non-nullable accountId cannot be null');
        }

        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets accountName.
     *
     * @return null|string
     */
    public function getAccountName()
    {
        return $this->container['accountName'];
    }

    /**
     * Sets accountName.
     *
     * @param null|string $accountName The account name
     *
     * @return self
     */
    public function setAccountName($accountName)
    {
        if (null === $accountName) {
            throw new \InvalidArgumentException('non-nullable accountName cannot be null');
        }

        $this->container['accountName'] = $accountName;

        return $this;
    }

    /**
     * Gets friendlyName.
     *
     * @return null|string
     */
    public function getFriendlyName()
    {
        return $this->container['friendlyName'];
    }

    /**
     * Sets friendlyName.
     *
     * @param null|string $friendlyName The account nick name
     *
     * @return self
     */
    public function setFriendlyName($friendlyName)
    {
        if (null === $friendlyName) {
            throw new \InvalidArgumentException('non-nullable friendlyName cannot be null');
        }

        $this->container['friendlyName'] = $friendlyName;

        return $this;
    }

    /**
     * Gets accountNumber.
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['accountNumber'];
    }

    /**
     * Sets accountNumber.
     *
     * @param string $accountNumber The account number without prefix
     *
     * @return self
     */
    public function setAccountNumber($accountNumber)
    {
        if (null === $accountNumber) {
            throw new \InvalidArgumentException('non-nullable accountNumber cannot be null');
        }

        $this->container['accountNumber'] = $accountNumber;

        return $this;
    }

    /**
     * Gets accountNumberPrefix.
     *
     * @return null|string
     */
    public function getAccountNumberPrefix()
    {
        return $this->container['accountNumberPrefix'];
    }

    /**
     * Sets accountNumberPrefix.
     *
     * @param null|string $accountNumberPrefix The account number prefix
     *
     * @return self
     */
    public function setAccountNumberPrefix($accountNumberPrefix)
    {
        if (null === $accountNumberPrefix) {
            throw new \InvalidArgumentException('non-nullable accountNumberPrefix cannot be null');
        }

        $this->container['accountNumberPrefix'] = $accountNumberPrefix;

        return $this;
    }

    /**
     * Gets iban.
     *
     * @return null|string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban.
     *
     * @param null|string $iban The account number in IBAN format
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (null === $iban) {
            throw new \InvalidArgumentException('non-nullable iban cannot be null');
        }

        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets bankCode.
     *
     * @return string
     */
    public function getBankCode()
    {
        return $this->container['bankCode'];
    }

    /**
     * Sets bankCode.
     *
     * @param string $bankCode The bank clearing code
     *
     * @return self
     */
    public function setBankCode($bankCode)
    {
        if (null === $bankCode) {
            throw new \InvalidArgumentException('non-nullable bankCode cannot be null');
        }

        $this->container['bankCode'] = $bankCode;

        return $this;
    }

    /**
     * Gets bankBicCode.
     *
     * @return null|string
     */
    public function getBankBicCode()
    {
        return $this->container['bankBicCode'];
    }

    /**
     * Sets bankBicCode.
     *
     * @param null|string $bankBicCode The bank BIC (SWIFT) code
     *
     * @return self
     */
    public function setBankBicCode($bankBicCode)
    {
        if (null === $bankBicCode) {
            throw new \InvalidArgumentException('non-nullable bankBicCode cannot be null');
        }

        $this->container['bankBicCode'] = $bankBicCode;

        return $this;
    }

    /**
     * Gets mainCurrency.
     *
     * @return null|string
     */
    public function getMainCurrency()
    {
        return $this->container['mainCurrency'];
    }

    /**
     * Sets mainCurrency.
     *
     * @param null|string $mainCurrency The main currency of the account
     *
     * @return self
     */
    public function setMainCurrency($mainCurrency)
    {
        if (null === $mainCurrency) {
            throw new \InvalidArgumentException('non-nullable mainCurrency cannot be null');
        }

        $this->container['mainCurrency'] = $mainCurrency;

        return $this;
    }

    /**
     * Gets accountTypeId.
     *
     * @return null|string
     */
    public function getAccountTypeId()
    {
        return $this->container['accountTypeId'];
    }

    /**
     * Sets accountTypeId.
     *
     * @param null|string $accountTypeId The account type
     *
     * @return self
     */
    public function setAccountTypeId($accountTypeId)
    {
        if (null === $accountTypeId) {
            throw new \InvalidArgumentException('non-nullable accountTypeId cannot be null');
        }

        $this->container['accountTypeId'] = $accountTypeId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && \array_key_exists($variableName, $fields) && null === $fields[$variableName]) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
